import numpy as np
import math
import matplotlib.pyplot as plt

np.set_printoptions(threshold = np.inf)

b = np.array([(0.5)*(math.cos(x)) for x in range(1,64)])

#matrix
A = np.matrix([[2 if x == i
                else -1 if (x - 1) == (i) 
                else -1 if (x+1) == (i)  
                else 0 for x in range(0,63)] for i in range(0,63)])

x_est = np.linalg.solve(A,b);

#step 1
numerator = np.linalg.norm(np.subtract(np.dot(A,x_est),b),np.inf);

denominator = np.linalg.norm(b, np.inf)
print("Output:")
print(numerator/denominator)

def Jacobi(A,x,b):
    D = np.diag(A)
    R = A - np.diagflat(D)

    return (b - np.dot(R,x)) / D
    
def GS(A,x,b):
    n = np.size(A, 0)
    for i in range(0, n):
        x_k1 = b[i];

        for j in range(0,n):
            if(i != j):
                x_k1 -= A[i,j] * x[j]
        x[j] = x_k1 / A[i,i]
    return x

x_j = np.array([i / 64 for i in range(1, 64)])
x_gs = np.array([i / 64 for i in range(1, 64)])

m = [];
j_x_coords = [];
gs_x_coords = [];



for i in range(0,6400):

    m.append(i)
    x_j = Jacobi(A,b,x_j)
    j_x_coords.append(math.log10(np.linalg.norm(x_j - x_est, np.inf)))
    x_gs = GS(A,b,x_gs)
    gs_x_coords.append(math.log10(np.linalg.norm(x_gs - x_est, np.inf)))

plt.title("Convergence of Jacobi vs Gauss-Siedel methods")
plt.xlabel("iteration")
plt.ylabel("error")
plt.scatter(j_x_coords,m)
plt.scatter(gs_x_coords,m)

plt.show()



